{"ast":null,"code":"import Settings from \"../settings\";\nconst URL = Settings.URL;\nlet roles = [];\n\nfunction handleHttpErrors(res) {\n  if (!res.ok) {\n    return Promise.reject({\n      status: res.status,\n      fullError: res.json()\n    });\n  }\n\n  return res.json();\n}\n\nfunction apiFacade() {\n  const login = (user, password) => {\n    const options = makeOptions(\"POST\", true, {\n      username: user,\n      password: password\n    });\n    return fetch(URL + \"/api/login\", options).then(handleHttpErrors).then(res => {\n      setToken(res.token);\n      roles = res.roles;\n    }).catch(error => console.log(\"An error occured! \" + error));\n  };\n\n  const fetchData = role => {\n    const options = makeOptions(\"GET\", true); //True add's the token\n\n    return fetch(URL + \"/api/info/\" + role, options).then(handleHttpErrors).catch(err => console.log(err));\n  };\n\n  const makeOptions = (method, addToken, body) => {\n    var opts = {\n      method: method,\n      headers: {\n        \"Content-type\": \"application/json\",\n        'Accept': 'application/json'\n      }\n    };\n\n    if (addToken && loggedIn()) {\n      opts.headers[\"x-access-token\"] = getToken();\n    }\n\n    if (body) {\n      opts.body = JSON.stringify(body);\n    }\n\n    return opts;\n  };\n\n  const setToken = token => {\n    localStorage.setItem(\"jwtToken\", token);\n  };\n\n  const getToken = () => {\n    return localStorage.getItem(\"jwtToken\");\n  };\n\n  const loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n  };\n\n  const logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n  };\n\n  const getRoles = () => {\n    return roles;\n  };\n\n  return {\n    makeOptions,\n    setToken,\n    getToken,\n    loggedIn,\n    login,\n    logout,\n    fetchData,\n    getRoles\n  };\n}\n\nconst facade = apiFacade();\nexport default facade;","map":{"version":3,"sources":["/home/riisager/Documents/studie/projects/CA3/ca3-frontend-starter/src/components/apiFacade.jsx"],"names":["Settings","URL","roles","handleHttpErrors","res","ok","Promise","reject","status","fullError","json","apiFacade","login","user","password","options","makeOptions","username","fetch","then","setToken","token","catch","error","console","log","fetchData","role","err","method","addToken","body","opts","headers","loggedIn","getToken","JSON","stringify","localStorage","setItem","getItem","logout","removeItem","getRoles","facade"],"mappings":"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","sourcesContent":["import Settings from \"../settings\";\n\nconst URL = Settings.URL;\nlet roles = [];\n\nfunction handleHttpErrors(res) {\n if (!res.ok) {\n   return Promise.reject({ status: res.status, fullError: res.json() })\n }\n return res.json();\n}\n \nfunction apiFacade() {\n \nconst login = (user, password) => {\n    const options = makeOptions(\"POST\", true,{username: user, password: password });\n    return fetch(URL + \"/api/login\", options)\n      .then(handleHttpErrors)\n      .then(res => {\n        setToken(res.token)\n        roles = res.roles;\n      })\n      .catch(error => console.log(\"An error occured! \" + error))\n}\n\nconst fetchData = (role) => { \n  const options = makeOptions(\"GET\",true); //True add's the token\n  return fetch(URL + \"/api/info/\" + role, options)\n  .then(handleHttpErrors)\n  .catch(err => console.log(err))\n}\n\nconst makeOptions= (method,addToken,body) =>{\n   var opts = {\n     method: method,\n     headers: {\n       \"Content-type\": \"application/json\",\n       'Accept': 'application/json',\n     }\n   }\n   if (addToken && loggedIn()) {\n     opts.headers[\"x-access-token\"] = getToken();\n   }\n   if (body) {\n     opts.body = JSON.stringify(body);\n   }\n   return opts;\n }\n\nconst setToken = (token) => {\n    localStorage.setItem(\"jwtToken\", token)\n}\n\nconst getToken = () => {\n    return localStorage.getItem(\"jwtToken\")\n}\n\nconst loggedIn = () => {\n    const loggedIn = getToken() != null;\n    return loggedIn;\n}\n\nconst logout = () => {\n    localStorage.removeItem(\"jwtToken\");\n}\n\nconst getRoles = () => {\n  return roles;\n}\n  \n return {\n     makeOptions,\n     setToken,\n     getToken,\n     loggedIn,\n     login,\n     logout,\n     fetchData,\n     getRoles\n }\n}\nconst facade = apiFacade();\nexport default facade;"]},"metadata":{},"sourceType":"module"}